## 1. 必备基础知识
1. C++，EOS的智能合约使用C++编写，需要有一定的C++基础（最好再去学学`CMakeList.txt`相关的知识点）
2. Linux基础，废话。。。

## 2. WASM简介
EOS引入了WebAssembly（简称WASM）作为智能合约的解释器，图片简单的解释了WebAssembly是怎么工作的：
![0_1529914900564_wasm.jpg](/assets/uploads/files/1529914902561-wasm-resized.jpg) 
其实WASM就是让C++写的代码能够运行在浏览器端，实际上其他语言(c, c++, java)编写的程序都可以编程成wasm字节码的程序。看出这种设计的好处没？也就是说EOS兼容所有用c, c++等高级语言编写的程序，EOS的应用层生态基于此就建立了，开发人员的学习成本非常低。同时wasm字节码既可以编译成机器码后执行，又可以使用解释器直接执行, 兼容性和性能兼有，EOS选择了未来编程序语言，背靠Web Assembly生态。

详细的内容大家感兴趣就去官方看看吧，还包含了一个unity写的游戏：https://webassembly.org/

## 3. eosiocpp工具
eosiocpp是eos官方提供的智能合约辅助工具，可以生成空的智能合约项目，把cpp文件编译成wasm文件，还能够生成abi文件（以前版本需要自己写，现在方便多了）
1. 新建项目
`eosiocpp -n helloworld`
2. 编译wasm
`eosiocpp -o helloworld.wast helloworld.cpp`
3. 生成abi
`eosiocpp -g helloworld.abi helloworld.hpp`

## 4. HelloWorld示例
我们通过一个最简单的Helloworld来看看智能合约是怎么编写的，项目实现一个功能，通过cleos发起一个交易，智能合约收到后输出Hello，XXX到控制台。
1. 新建项目
`eosiocpp -n helloworld`
这个时候会新建helloworld文件夹，里面自动生成helloworld.cpp与helloworld.hpp文件
2. 查看helloworld.cpp代码，系统默认已经写好了例子，都是一些基本C++语法，这里不做解释了
```
#include <eosiolib/eosio.hpp>

using namespace eosio;

class hello : public eosio::contract {
  public:
      using contract::contract;

      /// @abi action
      void hi( account_name user ) {
         print( "Hello, ", name{user} );
      }
};

EOSIO_ABI( hello, (hi) )
```
3. 回到控制台，将代码编译成wasm
`eosiocpp -o helloworld.wast helloworld.cpp`
4. 生成abi
`eosiocpp -g helloworld.abi helloworld.hpp`
5. 创建helloworld账号，用于部署这个合约（公钥自己生成`cleos create keys`并导入钱包`cleos wallet import {公钥地址}`）
`cleos create account eosio helloworld {owner公钥}  {active公钥}`
6. 部署合约，其中的`../helloworld`是helloworld合约所在文件夹
`cleos set contract helloworld ../helloworld -p helloworld`
7. 确认是否部署成功
`cleos get code helloworld`
这个命令可以返回部署的合约地址（应该是合约地址，不肯定），如果有返回就是代表已经部署成功
8. 测试合约功能
`cleos push action helloworld hi '["eosio"]' -p helloworld`
控制台会输出Hello, eosio
